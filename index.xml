<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>잠들지 않는 시간</title>
    <link>https://lisianthuss.github.io/</link>
    <description>Recent content on 잠들지 않는 시간</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Mar 2020 11:06:56 +0900</lastBuildDate>
    
	<atom:link href="https://lisianthuss.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Command Pattern</title>
      <link>https://lisianthuss.github.io/post/command_pattern/</link>
      <pubDate>Tue, 03 Mar 2020 11:06:56 +0900</pubDate>
      
      <guid>https://lisianthuss.github.io/post/command_pattern/</guid>
      <description>실행될 기능을 캡슐화하여, 기능 실행을 요구하는 호출자(Invoker) 클래스와, 실제 기능을 수행하는 수신자(Receiver) 클래스 사이의 의존성을 제거한다.
따라서 실행될 기능의 변경에도 호출자 클래스를 수정 없이 그대로 사용할 수 있다.
 언제 사용하지? 이벤트가 발생했을 때 실행될 기능이 다양하면서도 변경이 필요한 경우, 이벤트를 발생시키는 클래스를 변경하지 않고 재사용하고자 할 때 유용하다.
 Command
&amp;ndash; 실행될 기능에 대한 인터페이스. 실행될 기능을 execute method로 선언함. ConcreteCommand
&amp;ndash; 실제로 실행되는 기능을 구현. Invoker
&amp;ndash; 기능의 실행을 요청하는 호출자 클래스 Receiver</description>
    </item>
    
    <item>
      <title>State Pattern</title>
      <link>https://lisianthuss.github.io/post/state_pattern/</link>
      <pubDate>Tue, 03 Mar 2020 09:53:50 +0900</pubDate>
      
      <guid>https://lisianthuss.github.io/post/state_pattern/</guid>
      <description>상황에 따라 동일한 작업이 다른 방식으로 실행될 때, 해당 상태가 작업을 수행하도록 위임하는 디자인 패턴이다.
 일을 수행할 때 상태 하나하나가 어떤 상태인지 확인해서 일을 다르게 수행한다면?  복잡한 조건식이 있는 코드가 만들어진다. 코드를 이해하거나 수정하기 어렵게 된다.  State Pattern을 사용하려면? 어떤 행위를 해야할 때, 상태에 행위를 수행하도록 위임한다
 시스템의 각 상태를 클래스로 분리해 표현 각 클래서에서 수행하는 행위들을 method로 구현 외부로부터 캡슐화하기 위해 인터페이스 생성 시스템의 각 상태를 나타내는 클래스가 실체화하게 한다.</description>
    </item>
    
    <item>
      <title>Singleton Pattern</title>
      <link>https://lisianthuss.github.io/post/singleton_pattern/</link>
      <pubDate>Tue, 03 Mar 2020 09:28:31 +0900</pubDate>
      
      <guid>https://lisianthuss.github.io/post/singleton_pattern/</guid>
      <description>인스턴스가 하나만 생성되는 것을 보장하며 어디에서든 이 인스턴스에 접근할 수 있는 디자인 패턴이다
 예제 ( 프린터 관리자 만들기 ) 1. 단 하나의 프린터(객체)만 생성해 어디서든 참조할 수 있게 해보자. new Printer() 가 호출되지 않도록 생성자를 private로 변경하고, 한 번만 호출되도록 getPrinter에 static 속성을 부여하면, Printer 인스턴스가 생성된 상황이라면 그 인스턴스를 반환하며, 없다면 새로 생성해서 반환한다.
public class Printer { private static Printer printer = null; private Printer() {} public static Printer getPrinter() { if (printer == null) printer = new Printer(); return printer; } public void print(Resource r) { .</description>
    </item>
    
    <item>
      <title>Strategy Pattern</title>
      <link>https://lisianthuss.github.io/post/strategy_pattern/</link>
      <pubDate>Tue, 03 Mar 2020 08:50:15 +0900</pubDate>
      
      <guid>https://lisianthuss.github.io/post/strategy_pattern/</guid>
      <description>같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고, 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴이다.
  Strategy
&amp;ndash; 인터페이스나 추상 클래스, 외부에도 동일한 방식으로 호출하는 방식을 명시 ConcreteStrategy
&amp;ndash; 알고리즘을 실제로 구현 Context
&amp;ndash; strategy 패턴을 실제로 이용. 동적으로 전략을 바꾸도록 setter method 제공  예제 ( 로봇 만들기 ) 1. 기본 설계 공격과이동이 가능한 태권v와 아톰을 위와 같이 설계할 수 있다.</description>
    </item>
    
  </channel>
</rss>